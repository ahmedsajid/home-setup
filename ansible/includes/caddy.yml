---

- name: "Caddyserver Install and setup"
  hosts: localhost
  connection: local
  vars:
    caddy_docker_image: "ahmedsajid/caddyserver:digitalocean"
    config_file: '/root/config.ini'
  tasks:
    - name: Check if config file exists
      stat:
        path: "{{ config_file }}"
      register: config_file_exists

    - name: stop play if config file doesn't exist
      meta: end_play
      when: not config_file_exists.stat.exists

    - name: Setting digital ocean facts
      set_fact:
        digitalocean_host: "{{ lookup('ini', 'host section=digitalocean file={{ config_file }}') }}"
        digitalocean_token: "{{ lookup('ini', 'token section=digitalocean file={{ config_file }}') }}"
        digitalocean_domain: "{{ lookup('ini', 'domain section=digitalocean file={{ config_file }}') }}"

    - name: stop play if config options do not exist
      meta: end_play
      when: digitalocean_host | length == 0 or digitalocean_domain | length == 0 or  digitalocean_token | length == 0

    - name: create caddy required folders
      file:
        state: directory
        path: "/opt/caddy/etc"

    - name: Deploy caddy custom config
      template:
        src: "../templates/caddyserver/Caddyfile.j2"
        dest: "/opt/caddy/etc/Caddyfile"
        mode: 0640

    - name: Deploy caddy container
      docker_container:
        name: "caddy"
        hostname: "caddy"
        image: "{{ caddy_docker_image }}"
        env:
          TZ: 'America/Toronto'
        ports:
          - 80:80
          - 443:443
        networks:
          - name: "app_network"
        command: "caddy run --config /etc/caddy/Caddyfile --adapter caddyfile --watch"
        restart_policy: always
        state: started
        pull: false
        volumes:
          - '/opt/caddy/etc/:/etc/caddy/'
        network_mode: "default"
        container_default_behavior: "compatibility"
      # added retry to tasks dependant on external services
      register: result
      retries: 5
      delay: 3
      until: result is succeeded
      when: not ansible_check_mode
